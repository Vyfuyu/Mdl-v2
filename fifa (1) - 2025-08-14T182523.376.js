
module.exports.config = {
  name: "fifa",
  version: "1.0.0",
  hasPermssion: 0,
  credits: "Kaori Waguri",
  description: "H·ªá th·ªëng game FIFA Online 4 v·ªõi AI",
  commandCategory: "Game",
  usages: "[register|profile|shop|squad|match|ranking]",
  cooldowns: 3,
  dependencies: {
    "axios": "",
    "fs-extra": ""
  }
};

module.exports.languages = {
  "vi": {
    "welcome": "üéâ CH√ÄO M·ª™NG ƒê·∫æN FIFA ONLINE 4!\n**{name}** ƒë√£ t·∫°o t√†i kho·∫£n th√†nh c√¥ng!\n\nüí∞ FIFA Coins: {coins:,} FC\n‚öΩ C·∫ßu th·ªß: {players} c·∫ßu th·ªß\nüèÜ Rank: {rank} Div {division}\n\nüéÅ Starter Pack:\n{starterPlayers}\n\nüéÆ D√πng 'fifa squad' ƒë·ªÉ xem ƒë·ªôi h√¨nh!",
    "alreadyRegistered": "‚úÖ B·∫°n ƒë√£ c√≥ t√†i kho·∫£n FIFA Online 4!",
    "notRegistered": "‚ùå B·∫°n ch∆∞a ƒëƒÉng k√Ω FIFA! D√πng 'fifa register'",
    "profile": "‚öΩ H·ªì S∆° FIFA - {name}\n\nüí∞ FIFA Coins: {coins:,} FC\n‚öΩ C·∫ßu th·ªß: {playersCount}\nüèÜ Rank: {rank} Div {division}\n\nüìä Th·ªëng K√™:\n**Tr·∫≠n:** {matches}\n**Th·∫Øng:** {wins}\n**H√≤a:** {draws}\n**Thua:** {losses}\n**T·ª∑ l·ªá th·∫Øng:** {winRate}%\n\n‚öΩ B√†n th·∫Øng:\n**Ghi:** {goalsFor}\n**Th·ªßng l∆∞·ªõi:** {goalsAgainst}\n\nüéØ ƒêi·ªÉm: {points} ƒëi·ªÉm\n‚öîÔ∏è ƒê·ªôi h√¨nh: {formation} ({filledPositions}/11)"
  },
  "en": {}
};

// File paths
const fs = global.nodemodule["fs-extra"];
const DATA_DIR = __dirname + '/../commands/cache/fifa_data';
const USERS_FILE = DATA_DIR + '/fifa_users.json';
const PLAYERS_FILE = DATA_DIR + '/fifa_players.json';
const MARKET_FILE = DATA_DIR + '/fifa_market.json';
const MATCHES_FILE = DATA_DIR + '/fifa_matches.json';
const CARDS_FILE = DATA_DIR + '/fifa_cards.json';

// Game configuration
const PACK_TYPES = {
  "bronze": {
    price: 500,
    fifa_price: 100,
    description: "G√≥i th∆∞·ªùng - C∆° h·ªôi nh·∫≠n c·∫ßu th·ªß Bronze-Silver",
    odds: { bronze: 70, silver: 25, gold: 4.5, inform: 0.5 }
  },
  "silver": {
    price: 1500,
    fifa_price: 300,
    description: "G√≥i b·∫°c - C∆° h·ªôi cao nh·∫≠n Gold v√† IF",
    odds: { bronze: 40, silver: 35, gold: 20, inform: 4, tots: 1 }
  },
  "gold": {
    price: 5000,
    fifa_price: 1000,
    description: "G√≥i v√†ng - ƒê·∫£m b·∫£o c√≥ Gold, c∆° h·ªôi IF/TOTS",
    odds: { silver: 30, gold: 50, inform: 15, tots: 4, icon: 1 }
  },
  "premium": {
    price: 15000,
    fifa_price: 3000,
    description: "G√≥i cao c·∫•p - C∆° h·ªôi cao TOTS/ICON",
    odds: { gold: 40, inform: 30, tots: 25, icon: 4, toty: 1 }
  },
  "ultimate": {
    price: 50000,
    fifa_price: 10000,
    description: "G√≥i t·ªëi th∆∞·ª£ng - ƒê·∫£m b·∫£o ICON ho·∫∑c TOTY",
    odds: { inform: 20, tots: 30, icon: 35, toty: 14, moments: 1 }
  }
};

const FORMATIONS = {
  "4-4-2": {
    positions: ["GK", "RB", "CB", "CB", "LB", "RM", "CM", "CM", "LM", "ST", "ST"],
    description: "ƒê·ªôi h√¨nh c√¢n b·∫±ng t·∫•n c√¥ng v√† ph√≤ng th·ªß"
  },
  "4-3-3": {
    positions: ["GK", "RB", "CB", "CB", "LB", "CDM", "CM", "CAM", "RW", "ST", "LW"],
    description: "ƒê·ªôi h√¨nh t·∫•n c√¥ng v·ªõi c√°nh"
  },
  "3-5-2": {
    positions: ["GK", "CB", "CB", "CB", "RWB", "CM", "CM", "CM", "LWB", "ST", "ST"],
    description: "ƒê·ªôi h√¨nh ki·ªÉm so√°t gi·ªØa s√¢n"
  },
  "4-2-3-1": {
    positions: ["GK", "RB", "CB", "CB", "LB", "CDM", "CDM", "CAM", "CAM", "CAM", "ST"],
    description: "ƒê·ªôi h√¨nh ph√≤ng th·ªß ch·∫Øc ch·∫Øn"
  }
};

// Utility functions
function ensureDataFolder() {
  if (!fs.existsSync(DATA_DIR)) {
    fs.mkdirSync(DATA_DIR, { recursive: true });
  }
}

function loadData(filePath, defaultData = {}) {
  ensureDataFolder();
  if (!fs.existsSync(filePath)) {
    fs.writeJsonSync(filePath, defaultData, { spaces: 2 });
    return defaultData;
  }
  try {
    return fs.readJsonSync(filePath);
  } catch (err) {
    return defaultData;
  }
}

function saveData(filePath, data) {
  ensureDataFolder();
  fs.writeJsonSync(filePath, data, { spaces: 2 });
}

function getUserData(userID) {
  const users = loadData(USERS_FILE, {});
  if (!users[userID]) {
    users[userID] = {
      fifa_coins: 1000,
      players: [],
      formation: "4-4-2",
      lineup: {},
      rank: "Bronze",
      division: 10,
      points: 0,
      matches_played: 0,
      wins: 0,
      draws: 0,
      losses: 0,
      goals_for: 0,
      goals_against: 0,
      daily_matches: 0,
      last_match_date: null,
      joined_date: new Date().toISOString(),
      season_rewards_claimed: false,
      starter_claimed: false
    };
    saveData(USERS_FILE, users);
  }
  return users[userID];
}

function saveUserData(userID, userData) {
  const users = loadData(USERS_FILE, {});
  users[userID] = userData;
  saveData(USERS_FILE, users);
}

function generateFallbackPlayer(cardType, ovr) {
  const positions = ["ST", "CAM", "CM", "CDM", "CB", "LB", "RB", "GK", "LW", "RW"];
  const names = ["Silva", "Santos", "Rodriguez", "Johnson", "Williams", "Brown", "Garcia", "Martinez"];
  const countries = ["Brazil", "Argentina", "Spain", "England", "France", "Germany", "Italy", "Portugal"];
  const clubs = ["FC Barcelona", "Real Madrid", "Manchester United", "Liverpool", "Bayern Munich", "PSG"];

  const baseStat = Math.max(30, ovr - 15);
  const variation = 20;

  const playerId = `pl_${Math.floor(Math.random() * 900000) + 100000}`;
  
  const playerData = {
    id: playerId,
    name: `${names[Math.floor(Math.random() * names.length)]} ${Math.floor(Math.random() * 99) + 1}`,
    position: positions[Math.floor(Math.random() * positions.length)],
    ovr: ovr,
    pace: Math.floor(Math.random() * variation) + baseStat,
    shooting: Math.floor(Math.random() * variation) + baseStat,
    passing: Math.floor(Math.random() * variation) + baseStat,
    dribbling: Math.floor(Math.random() * variation) + baseStat,
    defending: Math.floor(Math.random() * variation) + baseStat,
    physical: Math.floor(Math.random() * variation) + baseStat,
    nationality: countries[Math.floor(Math.random() * countries.length)],
    club: clubs[Math.floor(Math.random() * clubs.length)],
    card_type: cardType,
    market_value: ovr * 1000 + Math.floor(Math.random() * 1500) + 500,
    created_at: new Date().toISOString()
  };

  // Save player to database
  const players = loadData(PLAYERS_FILE, {});
  players[playerId] = playerData;
  saveData(PLAYERS_FILE, players);

  return playerData;
}

async function generatePlayerWithAI(cardType) {
  const ovrRanges = {
    bronze: [65, 74],
    silver: [75, 79],
    gold: [80, 85],
    inform: [86, 89],
    tots: [90, 94],
    icon: [89, 95],
    toty: [95, 99],
    moments: [96, 99]
  };

  const [minOvr, maxOvr] = ovrRanges[cardType] || [70, 80];
  const targetOvr = Math.floor(Math.random() * (maxOvr - minOvr + 1)) + minOvr;

  return generateFallbackPlayer(cardType, targetOvr);
}

function autoSetupFormation(userData) {
  const players = loadData(PLAYERS_FILE, {});
  const availablePlayers = userData.players
    .map(id => players[id])
    .filter(p => p)
    .sort((a, b) => b.ovr - a.ovr);

  const formationPositions = FORMATIONS[userData.formation].positions;
  const newLineup = {};
  const usedPlayers = new Set();

  for (let i = 0; i < formationPositions.length; i++) {
    const position = formationPositions[i];
    
    let bestPlayer = null;
    for (const player of availablePlayers) {
      if (!usedPlayers.has(player.id)) {
        if (player.position === position || 
            (position === "CB" && ["CB", "CDM"].includes(player.position)) ||
            (position === "CM" && ["CM", "CAM", "CDM"].includes(player.position))) {
          bestPlayer = player;
          break;
        }
      }
    }
    
    if (!bestPlayer) {
      for (const player of availablePlayers) {
        if (!usedPlayers.has(player.id)) {
          bestPlayer = player;
          break;
        }
      }
    }
    
    if (bestPlayer) {
      newLineup[i.toString()] = bestPlayer.id;
      usedPlayers.add(bestPlayer.id);
    }
  }

  userData.lineup = newLineup;
  return newLineup;
}

function checkRankPromotion(userData) {
  const pointsPerDivision = 100;
  
  if (userData.points >= pointsPerDivision) {
    userData.points -= pointsPerDivision;
    
    if (userData.division > 1) {
      userData.division -= 1;
    } else {
      const rankOrder = ["Bronze", "Silver", "Gold", "Platinum", "Diamond", "Elite"];
      const currentIndex = rankOrder.indexOf(userData.rank);
      if (currentIndex < rankOrder.length - 1) {
        userData.rank = rankOrder[currentIndex + 1];
        userData.division = 10;
      }
    }
    return true;
  }
  return false;
}

async function startAIMatch(api, event) {
  const { threadID, messageID, senderID } = event;
  const userData = getUserData(senderID);

  const lineup = userData.lineup || {};
  const filledPositions = Object.keys(lineup).filter(pos => lineup[pos]).length;
  
  if (filledPositions < 11) {
    return api.sendMessage(`‚ùå ƒê·ªôi h√¨nh ch∆∞a ƒë·ªß 11 c·∫ßu th·ªß! (Hi·ªán c√≥: ${filledPositions}/11)\nD√πng 'fifa auto' ƒë·ªÉ AI setup t·ª± ƒë·ªông.`, threadID, messageID);
  }

  const today = new Date().toDateString();
  const lastMatchDate = userData.last_match_date ? new Date(userData.last_match_date).toDateString() : null;
  
  if (lastMatchDate !== today) {
    userData.daily_matches = 0;
  }

  if (userData.daily_matches >= 10) {
    return api.sendMessage("‚ùå B·∫°n ƒë√£ ƒë·∫°t gi·ªõi h·∫°n tr·∫≠n ƒë·∫•u h√¥m nay! (10 tr·∫≠n/ng√†y)", threadID, messageID);
  }

  api.sendMessage("‚öΩ TR·∫¨N ƒê·∫§U B·∫ÆT ƒê·∫¶U!\n\n" +
    "üèüÔ∏è ƒêang thi ƒë·∫•u v·ªõi AI Bot...\n" +
    "‚è±Ô∏è Th·ªùi gian: 30 gi√¢y\n" +
    "üìä T·ª∑ s·ªë: 0 - 0\n\n" +
    "‚è≥ Tr·∫≠n ƒë·∫•u s·∫Ω t·ª± ƒë·ªông k·∫øt th√∫c...", threadID, messageID);

  setTimeout(() => {
    const playerScore = Math.floor(Math.random() * 4);
    const aiScore = Math.floor(Math.random() * 4);

    let result = '';
    let pointsEarned = 0;
    let coinsEarned = Math.floor(Math.random() * 151) + 50;

    if (playerScore > aiScore) {
      result = 'üèÜ CHI·∫æN TH·∫ÆNG!';
      userData.wins += 1;
      pointsEarned = 3;
      coinsEarned *= 2;
    } else if (playerScore < aiScore) {
      result = 'üò¢ TH·∫§T B·∫†I';
      userData.losses += 1;
      pointsEarned = 0;
    } else {
      result = 'ü§ù H√íA';
      userData.draws += 1;
      pointsEarned = 1;
    }

    userData.matches_played += 1;
    userData.daily_matches += 1;
    userData.last_match_date = new Date().toISOString();
    userData.points += pointsEarned;
    userData.goals_for += playerScore;
    userData.goals_against += aiScore;
    userData.fifa_coins += coinsEarned;

    const rankChanged = checkRankPromotion(userData);
    saveUserData(senderID, userData);

    let resultMsg = `‚öΩ K·∫æT QU·∫¢ TR·∫¨N ƒê·∫§U - ${result}\n\n` +
      `üìä **T·ª∑ s·ªë cu·ªëi:** ${playerScore} - ${aiScore}\n` +
      `üí∞ Th∆∞·ªüng: +${coinsEarned:,} FIFA Coins\n` +
      `üèÜ ƒêi·ªÉm: +${pointsEarned} ƒëi·ªÉm\n` +
      `üìä Rank: ${userData.rank} Div ${userData.division}`;

    if (rankChanged) {
      resultMsg += `\n\nüìà THƒÇNG H·∫†NG!\nCh√∫c m·ª´ng! B·∫°n ƒë√£ l√™n ${userData.rank} Division ${userData.division}!`;
    }

    if (Math.random() < 0.1) {
      resultMsg += '\n\nüéÅ Ph·∫ßn th∆∞·ªüng ƒë·∫∑c bi·ªát: Nh·∫≠n ƒë∆∞·ª£c Bronze Pack!';
      setTimeout(async () => {
        const bonusPlayer = await generatePlayerWithAI('bronze');
        userData.players.push(bonusPlayer.id);
        saveUserData(senderID, userData);
        api.sendMessage(`üéÅ Bonus: Nh·∫≠n ƒë∆∞·ª£c c·∫ßu th·ªß ${bonusPlayer.name} (OVR ${bonusPlayer.ovr})!`, threadID);
      }, 1000);
    }

    api.sendMessage(resultMsg, threadID);
  }, 30000);
}

module.exports.handleReply = async function({ api, event, handleReply, getText }) {
  const { type, author } = handleReply;
  const { threadID, messageID, senderID } = event;
  let body = event.body || "";
  
  if (author != senderID) return;

  const reply = (msg) => api.sendMessage(msg, threadID, messageID);

  if (type === 'pack_menu') {
    const userData = getUserData(senderID);
    const packType = body.toLowerCase();
    
    if (!PACK_TYPES[packType]) {
      return reply("‚ùå G√≥i kh√¥ng h·ª£p l·ªá! Ch·ªçn: bronze, silver, gold, premium, ultimate");
    }

    const packInfo = PACK_TYPES[packType];
    const packPrice = packInfo.fifa_price;

    if (userData.fifa_coins < packPrice) {
      return reply(`‚ùå B·∫°n kh√¥ng ƒë·ªß ${packPrice.toLocaleString()} FIFA Coins! (Hi·ªán c√≥: ${userData.fifa_coins.toLocaleString()} FC)`);
    }

    userData.fifa_coins -= packPrice;

    const packOdds = packInfo.odds;
    let rand = Math.random() * 100;
    let cumulative = 0;
    let selectedType = "bronze";

    for (const [cardType, probability] of Object.entries(packOdds)) {
      cumulative += probability;
      if (rand <= cumulative) {
        selectedType = cardType;
        break;
      }
    }

    reply("üì¶ ƒêang m·ªü pack... Vui l√≤ng ch·ªù...");

    setTimeout(async () => {
      const player = await generatePlayerWithAI(selectedType);
      userData.players.push(player.id);
      saveUserData(senderID, userData);

      const cardEmojis = {
        bronze: "ü•â",
        silver: "ü•à", 
        gold: "ü•á",
        inform: "üî•",
        tots: "üíô",
        icon: "üíú",
        toty: "‚ù§Ô∏è",
        moments: "üíé"
      };

      const resultMsg = `üéâ ${cardEmojis[selectedType]} ${selectedType.toUpperCase()} CARD!\n\n` +
        `‚öΩ **${player.name}** (${player.position})\n` +
        `‚≠ê Overall: **${player.ovr}**\n` +
        `üèÉ Pace: ${player.pace}\n` +
        `‚öΩ Shooting: ${player.shooting}\n` +
        `üéØ Passing: ${player.passing}\n` +
        `‚ö° Dribbling: ${player.dribbling}\n` +
        `üõ°Ô∏è Defending: ${player.defending}\n` +
        `üí™ Physical: ${player.physical}\n` +
        `üåç Nationality: ${player.nationality}\n` +
        `üèüÔ∏è Club: ${player.club}\n` +
        `üí∞ Market Value: ${player.market_value.toLocaleString()} FC\n\n` +
        `üí∞ S·ªë d∆∞: ${userData.fifa_coins.toLocaleString()} FC`;

      reply(resultMsg);
    }, 3000);
  }
  else if (type === 'formation_menu') {
    const formation = body.trim();
    if (!FORMATIONS[formation]) {
      return reply("‚ùå S∆° ƒë·ªì kh√¥ng h·ª£p l·ªá! Ch·ªçn: 4-4-2, 4-3-3, 3-5-2, 4-2-3-1");
    }

    const userData = getUserData(senderID);
    userData.formation = formation;
    userData.lineup = {};
    saveUserData(senderID, userData);

    reply(`‚úÖ ƒê√£ chuy·ªÉn sang s∆° ƒë·ªì **${formation}**!\n\n` +
      `üìù M√¥ t·∫£: ${FORMATIONS[formation].description}\n` +
      `üë• V·ªã tr√≠: ${FORMATIONS[formation].positions.join(' - ')}\n\n` +
      `üîß D√πng 'fifa auto' ƒë·ªÉ AI setup t·ª± ƒë·ªông!`);
  }
  else if (type === 'match_opponent') {
    const opponentType = body.toLowerCase();
    
    if (opponentType === 'ai' || opponentType === 'bot') {
      await startAIMatch(api, event);
    } else {
      reply("üîÑ T√≠nh nƒÉng PvP s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t s·ªõm!");
    }
  }
};

module.exports.run = async function({ api, event, args, getText, Users }) {
  const { threadID, messageID, senderID } = event;
  const reply = (msg) => api.sendMessage(msg, threadID, messageID);

  if (args.length === 0) {
    const helpMsg = "‚öΩ FIFA ONLINE 4 - H∆Ø·ªöNG D·∫™N CH∆†I\n\n" +
      "üéÆ L·ªánh C∆° B·∫£n:\n" +
      "‚Ä¢ fifa register - ƒêƒÉng k√Ω t√†i kho·∫£n\n" +
      "‚Ä¢ fifa profile - Xem h·ªì s∆°\n" +
      "‚Ä¢ fifa shop - C·ª≠a h√†ng\n" +
      "‚Ä¢ fifa squad - ƒê·ªôi h√¨nh\n\n" +
      "‚öîÔ∏è Tr·∫≠n ƒê·∫•u:\n" +
      "‚Ä¢ fifa match - ƒê·∫•u v·ªõi AI\n" +
      "‚Ä¢ fifa ranking - B·∫£ng x·∫øp h·∫°ng\n\n" +
      "üè™ Th∆∞∆°ng M·∫°i:\n" +
      "‚Ä¢ fifa market - Ch·ª£ c·∫ßu th·ªß\n" +
      "‚Ä¢ fifa auction - ƒê·∫•u gi√°\n\n" +
      "üéØ L·ªánh Nhanh:\n" +
      "‚Ä¢ pack - M·ªü pack nhanh\n" +
      "‚Ä¢ ƒë·ªôi h√¨nh - Xem ƒë·ªôi h√¨nh\n" +
      "‚Ä¢ ƒë·∫•u - T√¨m tr·∫≠n ƒë·∫•u";
    
    return reply(helpMsg);
  }

  const command = args[0].toLowerCase();

  switch (command) {
    case 'register':
      const userData = getUserData(senderID);
      
      if (userData.starter_claimed) {
        return reply("‚úÖ B·∫°n ƒë√£ c√≥ t√†i kho·∫£n FIFA Online 4!");
      }

      const starterPlayers = [];
      for (let i = 0; i < 3; i++) {
        const player = await generatePlayerWithAI('bronze');
        starterPlayers.push(player);
        userData.players.push(player.id);
      }

      userData.starter_claimed = true;
      userData.fifa_coins += 2000;
      saveUserData(senderID, userData);

      const starterText = starterPlayers.map(p => 
        `‚≠ê **${p.name}** (${p.position}) - OVR ${p.ovr}`
      ).join('\n');

      const userName = (await Users.getName(senderID)) || "Unknown";
      const welcomeMsg = `üéâ CH√ÄO M·ª™NG ƒê·∫æN FIFA ONLINE 4!\n**${userName}** ƒë√£ t·∫°o t√†i kho·∫£n th√†nh c√¥ng!\n\nüí∞ FIFA Coins: ${userData.fifa_coins.toLocaleString()} FC\n‚öΩ C·∫ßu th·ªß: ${userData.players.length} c·∫ßu th·ªß\nüèÜ Rank: ${userData.rank} Div ${userData.division}\n\nüéÅ Starter Pack:\n${starterText}\n\nüéÆ D√πng 'fifa squad' ƒë·ªÉ xem ƒë·ªôi h√¨nh!`;

      reply(welcomeMsg);
      break;

    case 'profile':
      const profileData = getUserData(senderID);
      
      if (!profileData.starter_claimed) {
        return reply("‚ùå B·∫°n ch∆∞a ƒëƒÉng k√Ω FIFA! D√πng 'fifa register'");
      }

      const totalMatches = profileData.matches_played;
      const winRate = totalMatches > 0 ? ((profileData.wins / totalMatches) * 100).toFixed(1) : 0;
      const filledPositions = Object.keys(profileData.lineup || {}).filter(pos => profileData.lineup[pos]).length;
      const profileUserName = (await Users.getName(senderID)) || "Unknown";

      const profileMsg = `‚öΩ H·ªì S∆° FIFA - ${profileUserName}\n\nüí∞ FIFA Coins: ${profileData.fifa_coins.toLocaleString()} FC\n‚öΩ C·∫ßu th·ªß: ${profileData.players.length}\nüèÜ Rank: ${profileData.rank} Div ${profileData.division}\n\nüìä Th·ªëng K√™:\n**Tr·∫≠n:** ${totalMatches}\n**Th·∫Øng:** ${profileData.wins}\n**H√≤a:** ${profileData.draws}\n**Thua:** ${profileData.losses}\n**T·ª∑ l·ªá th·∫Øng:** ${winRate}%\n\n‚öΩ B√†n th·∫Øng:\n**Ghi:** ${profileData.goals_for}\n**Th·ªßng l∆∞·ªõi:** ${profileData.goals_against}\n\nüéØ ƒêi·ªÉm: ${profileData.points} ƒëi·ªÉm\n‚öîÔ∏è ƒê·ªôi h√¨nh: ${profileData.formation} (${filledPositions}/11)`;

      reply(profileMsg);
      break;

    case 'shop':
      const shopData = getUserData(senderID);
      if (!shopData.starter_claimed) {
        return reply("‚ùå B·∫°n ch∆∞a ƒëƒÉng k√Ω! D√πng 'fifa register'");
      }

      const shopMsg = "üè™ FIFA SHOP - POWERED BY AI\n\n" +
        `üí∞ **S·ªë d∆∞:** ${shopData.fifa_coins.toLocaleString()} FIFA Coins\n\n` +
        "üì¶ G√ìI C·∫¶U TH·ª¶:\n" +
        "‚Ä¢ Bronze Pack - 100 FC\n" +
        "‚Ä¢ Silver Pack - 300 FC\n" +
        "‚Ä¢ Gold Pack - 1,000 FC\n" +
        "‚Ä¢ Premium Pack - 3,000 FC\n" +
        "‚Ä¢ Ultimate Pack - 10,000 FC\n\n" +
        "ü§ñ AI Features:\n" +
        "‚Ä¢ C·∫ßu th·ªß ƒë∆∞·ª£c AI t·∫°o ra\n" +
        "‚Ä¢ T√™n v√† stats ƒë·ªôc ƒë√°o\n" +
        "‚Ä¢ Kh√¥ng tr√πng l·∫∑p\n\n" +
        "üí° Ph·∫£n h·ªìi tin nh·∫Øn n√†y v·ªõi t√™n g√≥i ƒë·ªÉ mua!";

      return api.sendMessage(shopMsg, threadID, (err, info) => {
        global.client.handleReply.push({
          name: this.config.name,
          messageID: info.messageID,
          author: senderID,
          type: "pack_menu"
        });
      }, messageID);

    case 'squad':
      const squadData = getUserData(senderID);
      if (!squadData.starter_claimed) {
        return reply("‚ùå B·∫°n ch∆∞a ƒëƒÉng k√Ω! D√πng 'fifa register'");
      }

      const players = loadData(PLAYERS_FILE, {});
      const formationPositions = FORMATIONS[squadData.formation].positions;
      const lineup = squadData.lineup || {};
      
      let formationText = "";
      let filled = 0;

      for (let i = 0; i < formationPositions.length; i++) {
        const position = formationPositions[i];
        const playerId = lineup[i.toString()];
        
        if (playerId && players[playerId]) {
          const player = players[playerId];
          formationText += `**${position}:** ${player.name} (OVR ${player.ovr})\n`;
          filled++;
        } else {
          formationText += `**${position}:** _Ch∆∞a ch·ªçn_\n`;
        }
      }

      let playersText = "";
      for (const playerId of squadData.players.slice(0, 10)) {
        if (players[playerId]) {
          const player = players[playerId];
          playersText += `‚öΩ **${player.name}** (${player.position}) - OVR ${player.ovr}\n`;
        }
      }
      
      if (squadData.players.length > 10) {
        playersText += `... v√† ${squadData.players.length - 10} c·∫ßu th·ªß kh√°c\n`;
      }

      const squadUserName = (await Users.getName(senderID)) || "Unknown";
      const squadMsg = `‚öîÔ∏è ƒê·ªòI H√åNH - ${squadUserName}\n\n` +
        `**S∆° ƒë·ªì:** ${squadData.formation}\n\n` +
        `üë• ƒê·ªôi h√¨nh ch√≠nh:\n${formationText}\n` +
        `üìä Tr·∫°ng th√°i: ${filled}/11 v·ªã tr√≠ ƒë√£ ch·ªçn\n\n` +
        `üë• C·∫ßu th·ªß s·ªü h·ªØu:\n${playersText || "Kh√¥ng c√≥"}\n\n` +
        `üîß Ch·ªânh ƒë·ªôi h√¨nh:\n` +
        `‚Ä¢ fifa formation - ƒê·ªïi s∆° ƒë·ªì\n` +
        `‚Ä¢ fifa auto - AI setup t·ª± ƒë·ªông`;

      reply(squadMsg);
      break;

    case 'formation':
      const formationData = getUserData(senderID);
      if (!formationData.starter_claimed) {
        return reply("‚ùå B·∫°n ch∆∞a ƒëƒÉng k√Ω! D√πng 'fifa register'");
      }

      let formationsMsg = "‚öîÔ∏è CH·ªåN S∆† ƒê·ªí ƒê·ªòI H√åNH\n\n" +
        "Ch·ªçn s∆° ƒë·ªì ph√π h·ª£p v·ªõi l·ªëi ch∆°i c·ªßa b·∫°n:\n\n";
      
      for (const [formation, data] of Object.entries(FORMATIONS)) {
        formationsMsg += `**${formation}**\n${data.description}\n\n`;
      }
      
      formationsMsg += "üí° Ph·∫£n h·ªìi tin nh·∫Øn n√†y v·ªõi s∆° ƒë·ªì b·∫°n mu·ªën ch·ªçn!";

      return api.sendMessage(formationsMsg, threadID, (err, info) => {
        global.client.handleReply.push({
          name: this.config.name,
          messageID: info.messageID,
          author: senderID,
          type: "formation_menu"
        });
      }, messageID);

    case 'auto':
      const autoData = getUserData(senderID);
      if (!autoData.starter_claimed) {
        return reply("‚ùå B·∫°n ch∆∞a ƒëƒÉng k√Ω! D√πng 'fifa register'");
      }

      if (autoData.players.length === 0) {
        return reply("‚ùå B·∫°n ch∆∞a c√≥ c·∫ßu th·ªß n√†o!");
      }

      const newLineup = autoSetupFormation(autoData);
      saveUserData(senderID, autoData);

      const playersData = loadData(PLAYERS_FILE, {});
      const autoFormationPositions = FORMATIONS[autoData.formation].positions;
      
      let autoFormationText = "";
      for (let i = 0; i < autoFormationPositions.length; i++) {
        const position = autoFormationPositions[i];
        const playerId = newLineup[i.toString()];
        
        if (playerId && playersData[playerId]) {
          const player = playersData[playerId];
          autoFormationText += `**${position}:** ${player.name} (OVR ${player.ovr})\n`;
        } else {
          autoFormationText += `**${position}:** _Ch∆∞a ch·ªçn_\n`;
        }
      }

      const autoMsg = `ü§ñ AI ƒê√É SETUP ƒê·ªòI H√åNH!\n\n` +
        `AI ƒë√£ t·ª± ƒë·ªông setup ƒë·ªôi h√¨nh t·ªëi ∆∞u cho s∆° ƒë·ªì **${autoData.formation}**:\n\n` +
        `üë• ƒê·ªôi h√¨nh ƒë√£ setup:\n${autoFormationText}\n` +
        `‚úÖ Ho√†n th√†nh: ƒê·ªôi h√¨nh ƒë√£ ƒë∆∞·ª£c setup t·ª± ƒë·ªông! B·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu ƒë·∫•u!`;

      reply(autoMsg);
      break;

    case 'match':
      const matchData = getUserData(senderID);
      if (!matchData.starter_claimed) {
        return reply("‚ùå B·∫°n ch∆∞a ƒëƒÉng k√Ω! D√πng 'fifa register'");
      }

      const matchLineup = matchData.lineup || {};
      const matchFilledPositions = Object.keys(matchLineup).filter(pos => matchLineup[pos]).length;
      
      if (matchFilledPositions < 11) {
        return reply(`‚ùå ƒê·ªôi h√¨nh ch∆∞a ƒë·ªß 11 c·∫ßu th·ªß! (Hi·ªán c√≥: ${matchFilledPositions}/11)\nD√πng 'fifa auto' ƒë·ªÉ AI setup t·ª± ƒë·ªông.`);
      }

      const matchMsg = "‚öîÔ∏è T√åM TR·∫¨N ƒê·∫§U\n\n" +
        "Ch·ªçn ƒë·ªëi th·ªß c·ªßa b·∫°n:\n\n" +
        "ü§ñ **AI** - ƒê·∫•u v·ªõi bot\n" +
        "üë• **PvP** - ƒê·∫•u v·ªõi ng∆∞·ªùi ch∆°i (s·∫Øp c√≥)\n\n" +
        "üí° Ph·∫£n h·ªìi tin nh·∫Øn n√†y v·ªõi 'ai' ho·∫∑c 'bot'!";

      return api.sendMessage(matchMsg, threadID, (err, info) => {
        global.client.handleReply.push({
          name: this.config.name,
          messageID: info.messageID,
          author: senderID,
          type: "match_opponent"
        });
      }, messageID);

    case 'ranking':
      const users = loadData(USERS_FILE, {});
      const rankedUsers = [];
      
      for (const [userID, data] of Object.entries(users)) {
        if (data.starter_claimed) {
          rankedUsers.push([parseInt(userID), data]);
        }
      }

      const rankOrder = { Elite: 6, Diamond: 5, Platinum: 4, Gold: 3, Silver: 2, Bronze: 1 };
      
      rankedUsers.sort((a, b) => {
        const [, dataA] = a;
        const [, dataB] = b;
        
        const rankA = rankOrder[dataA.rank] || 0;
        const rankB = rankOrder[dataB.rank] || 0;
        
        if (rankA !== rankB) return rankB - rankA;
        if (dataA.division !== dataB.division) return dataA.division - dataB.division;
        return dataB.points - dataA.points;
      });

      let rankingMsg = "üèÜ B·∫¢NG X·∫æP H·∫†NG FIFA ONLINE 4\n\n";
      
      for (let i = 0; i < Math.min(10, rankedUsers.length); i++) {
        const [userID, data] = rankedUsers[i];
        try {
          const name = (await Users.getName(userID)) || "Unknown";
          
          const medal = i === 0 ? "ü•á" : i === 1 ? "ü•à" : i === 2 ? "ü•â" : `**#${i+1}**`;
          
          rankingMsg += `${medal} **${name}**\n`;
          rankingMsg += `   ${data.rank} Div ${data.division} ‚Ä¢ ${data.points} ƒëi·ªÉm\n`;
          rankingMsg += `   ${data.wins}-${data.draws}-${data.losses} ‚Ä¢ ${data.fifa_coins.toLocaleString()} FC\n\n`;
        } catch (error) {
          continue;
        }
      }
      
      rankingMsg += "üîÑ Reset h√†ng tu·∫ßn v√†o Ch·ªß nh·∫≠t";
      reply(rankingMsg);
      break;

    case 'market':
      reply("üè™ CH·ª¢ C·∫¶U TH·ª¶ FIFA\n\n" +
        "üíº Mua b√°n v√† ƒë·∫•u gi√° c·∫ßu th·ªß v·ªõi ng∆∞·ªùi ch∆°i kh√°c\n\n" +
        "üî® ƒê·∫•u Gi√° - ƒê·∫∑t c·∫ßu th·ªß l√™n ƒë·∫•u gi√° cho ng∆∞·ªùi kh√°c ƒë·∫•u th·∫ßu\n" +
        "üí± Chuy·ªÉn Nh∆∞·ª£ng - B√°n c·∫ßu th·ªß v·ªõi gi√° c·ªë ƒë·ªãnh\n" +
        "üìä Xem ƒê·∫•u Gi√° - Xem c√°c ƒë·∫•u gi√° ƒëang ho·∫°t ƒë·ªông\n\n" +
        "üîÑ T√≠nh nƒÉng s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t s·ªõm!");
      break;

    default:
      reply("‚ùå L·ªánh kh√¥ng h·ª£p l·ªá! D√πng 'fifa' ƒë·ªÉ xem h∆∞·ªõng d·∫´n.");
  }
};

module.exports.onLoad = function() {
  ensureDataFolder();
};
